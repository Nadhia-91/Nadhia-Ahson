from googleapiclient.discovery import build
import pymongo
import pandas as pd
import psycopg2 
import numpy as np
import streamlit as st


# In[5]:


def Api_connect():
    Api_key="AIzaSyBX4bVUeO3E8P96C99MRGnYfqGtZMEevik"
    api_service_name="youtube"
    api_version="v3"
    youtube=build(api_service_name,api_version,developerKey=Api_key)
    return youtube
youtube=Api_connect()


# In[8]:


def channel_info(channel_id):
    request=youtube.channels().list(
                    part="snippet,contentDetails,Statistics",
                    id=channel_id)
    data=request.execute()
    channel_information=dict(
                        Channel_Name = data["items"][0]["snippet"]["title"],
                        Channel_Description=data["items"][0]["snippet"]["description"],
                        Playlist_Id=data["items"][0]["contentDetails"]["relatedPlaylists"]["uploads"],
                        Channel_Id=data["items"][0]["id"],
                        Subscription_Count=data["items"][0]["statistics"]["subscriberCount"],
                        Views=data["items"][0]["statistics"]["viewCount"],
                        Total_Videos = data["items"][0]["statistics"]["videoCount"],)
    return channel_information


# In[9]:


def videos_details(channel_id):
    video_ids = []
    response_video = youtube.channels().list(id=channel_id, 
                                  part='contentDetails').execute()
    playlist_id = response_video['items'][0]['contentDetails']['relatedPlaylists']['uploads']
    next_page_token = None
    while True:
        response_video=youtube.playlistItems().list(part='snippet',playlistId=playlist_id,maxResults=50,pageToken=next_page_token).execute()
        for i in range(len(response_video['items'])):
            video_ids.append(response_video['items'][i]['snippet']['resourceId']['videoId'])
        next_page_token = response_video.get('nextPageToken')
        if next_page_token is None:
            break
    return video_ids


# In[10]:


def playlist_id_info(channel_id):
    All_data = []
    next_page_token = None
    next_page = True
    while next_page:
        request = youtube.playlists().list(part="snippet,contentDetails",channelId=channel_id,maxResults=50,pageToken=next_page_token)
        response = request.execute()
        for item in response['items']: 
            data={'PlaylistId':item['id'],
                    'Title':item['snippet']['title'],
                    'ChannelId':item['snippet']['channelId'],
                    'ChannelName':item['snippet']['channelTitle'],
                    'PublishedAt':item['snippet']['publishedAt'],
                    'VideoCount':item['contentDetails']['itemCount']}
            All_data.append(data)
        next_page_token = response.get('nextPageToken')
        if next_page_token is None:
            next_page=False
    return All_data


# In[11]:


def video_info_details(video_ids):
        video = []
        for video_id in video_ids:
                request = youtube.videos().list(
                                part="snippet,contentDetails,Statistics",id = video_id)
                videoinfo = request.execute()
                for item in videoinfo["items"]:
                        video_info=dict(Channel_Name = item['snippet']['channelTitle'],
                                Channel_Id = item['snippet']['channelId'],
                                Video_Id = item['id'],
                                Title = item['snippet']['title'],
                                Tags = item['snippet'].get('tags'),
                                Thumbnail = item['snippet']['thumbnails']['default']['url'],
                                Description = item['snippet']['description'],
                                Published_Date = item['snippet']['publishedAt'],
                                Duration = item['contentDetails']['duration'],
                                Views = item['statistics']['viewCount'],
                                Likes = item['statistics'].get('likeCount'),
                                Comments = item['statistics'].get('commentCount'),
                                Favorite_Count = item['statistics']['favoriteCount'],
                                Definition = item['contentDetails']['definition'],
                                Caption_Status = item['contentDetails']['caption'])
                        video.append(video_info)
        return video


# In[12]:


def comment_info(video_ids):
        Comment_details = []
        for video_id in video_ids:
                request = youtube.commentThreads().list(part = "snippet",videoId = video_id,maxResults = 50)
                res_comment = request.execute()
                for item in res_comment["items"]:
                         comment_information = dict(
                                        Comment_Id = item["snippet"]["topLevelComment"]["id"],
                                        Video_Id = item["snippet"]["videoId"],
                                        Comment_Text = item["snippet"]["topLevelComment"]["snippet"]["textOriginal"],
                                        Comment_Author = item["snippet"]["topLevelComment"]["snippet"]["authorDisplayName"],
                                        Comment_Published = item["snippet"]["topLevelComment"]["snippet"]["publishedAt"])
                         Comment_details.append(comment_information)
        
        return Comment_details


# In[24]:


#connection to mongodb
client=pymongo.MongoClient("mongodb://localhost:27017")
mydb=client["youtube_db"]


# In[25]:


def data_channel(channel_id):
    channel_datas=channel_info(channel_id)
    playlist_datas=playlist_id_info(channel_id)
    video_ids=videos_details(channel_id)
    video_datas=video_info_details(video_ids)
    comment_datas=comment_info(video_ids)
    db_connect=mydb["data_channel"]
    db_connect.insert_one({"channel_information_details":channel_datas,"playlist_information":playlist_datas,
                           "video_information":video_datas,"comment_information":comment_datas})
    return "Extracted"


# In[32]:


#connect to sql
def channels_tab():

        mycon=psycopg2.connect(host='localhost',user='postgres',password='dhia@91',database='youtube_db',port='5432')
        cur=mycon.cursor()
        drop = "drop table if exists channels"
        cur.execute(drop)
        mycon.commit()
        create_query = '''create table if not exists channels(Channel_Name varchar(100),Channel_Id varchar(80) primary key, 
                        Subscription_Count bigint, Views bigint,Total_Videos int,Channel_Description text,
                        Playlist_Id varchar(50))'''
        cur.execute(create_query)
        mycon.commit()

        list = []
        mydb=client["youtube_db"]
        db_connect=mydb["data_channel"]
        for ch_data in db_connect.find({},{"_id":0,"channel_information_details":1}):
                list.append(ch_data["channel_information_details"])
        df = pd.DataFrame(list)
        for index,row in df.iterrows():
                insert_query = '''INSERT into channels(Channel_Name,Channel_Id,Subscription_Count,Views,Total_Videos,Channel_Description,
                                Playlist_Id) VALUES(%s,%s,%s,%s,%s,%s,%s)'''
                values =(row['Channel_Name'],row['Channel_Id'],row['Subscription_Count'],row['Views'],row['Total_Videos'],
                                 row['Channel_Description'],row['Playlist_Id'])                
                cur.execute(insert_query,values)
                mycon.commit()


# In[37]:


def playlists_tab():
    mycon=psycopg2.connect(host='localhost',user='postgres',password='dhia@91',database='youtube_db',port='5432')
    cur=mycon.cursor()
    drop = "drop table if exists playlists"
    cur.execute(drop)
    mycon.commit()
    create_query = '''create table if not exists playlists(playlistId varchar(100)primary key,Title varchar(100),ChannelId varchar(100),
                    ChannelName varchar(100), PublishedAt timestamp,VideoCount int)'''
    cur.execute(create_query)
    mycon.commit()

    list1 = []
    mydb=client["youtube_db"]
    db_connect=mydb["data_channel"]
    for pl_data in db_connect.find({},{"_id":0,"playlist_information":1}):
            for i in range(len(pl_data["playlist_information"])):
                    list1.append(pl_data["playlist_information"][i])
    df = pd.DataFrame(list1)
    for index,row in df.iterrows():
            insert_query = '''INSERT into playlists(PlaylistId,Title,ChannelId,ChannelName,PublishedAt,VideoCount) VALUES(%s,%s,%s,%s,%s,%s)'''
                
            values =(row['PlaylistId'],row['Title'],row['ChannelId'],row['ChannelName'],row['PublishedAt'],row['VideoCount'])         
            cur.execute(insert_query,values)
            mycon.commit()


# In[39]:


def videos_tab():
   mycon=psycopg2.connect(host='localhost',user='postgres',password='dhia@91',database='youtube_db',port='5432')
   cur=mycon.cursor()
   drop = "drop table if exists videos"
   cur.execute(drop)
   mycon.commit()
   create_query = '''create table if not exists videos(Channel_Name varchar(150),Channel_Id varchar(100),Video_Id varchar(50) primary key, 
                       Title varchar(150), Tags text,Thumbnail varchar(225),Description text, Published_Date timestamp,Duration interval, 
                       Views bigint, Likes bigint,Comments int,Favorite_Count int, Definition varchar(10), Caption_Status varchar(50))'''
   cur.execute(create_query)
   mycon.commit()
   list2 = []
   mydb=client["youtube_db"]
   db_connect=mydb["data_channel"]
   for vd_data in db_connect.find({},{"_id":0,"video_information":1}):
           for i in range(len(vd_data["video_information"])):
                   list2.append(vd_data["video_information"][i])
   df1 = pd.DataFrame(list2)
   for index,row in df1.iterrows():
       insert_query = '''Insert into videos(Channel_Name,Channel_Id,Video_Id, Title, Tags,Thumbnail,Description, 
                       Published_Date,Duration, Views, Likes,Comments,Favorite_Count, Definition, Caption_Status)
                       VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s)'''
       values=( row['Channel_Name'],row['Channel_Id'],row['Video_Id'],row['Title'],row['Tags'],row['Thumbnail'],row['Description'],row['Published_Date'],
               row['Duration'],row['Views'],row['Likes'],row['Comments'],row['Favorite_Count'],row['Definition'],row['Caption_Status'])
                            
       cur.execute(insert_query,values)
       mycon.commit()


# In[41]:


def comment_tab():
    mycon=psycopg2.connect(host='localhost',user='postgres',password='dhia@91',database='youtube_db',port='5432')
    cur=mycon.cursor()
    drop = "drop table if exists comments"
    cur.execute(drop)
    mycon.commit()
    create_query = '''CREATE TABLE if not exists comments(Comment_Id varchar(100) primary key,
                        Video_Id varchar(80),Comment_Text text, Comment_Author varchar(150),Comment_Published timestamp)'''
    cur.execute(create_query)
    mycon.commit()
    list3 = []
    mydb=client["youtube_db"]
    db_connect=mydb["data_channel"]
    for cm_data in db_connect.find({},{"_id":0,"comment_information":1}):
        for i in range(len(cm_data["comment_information"])):
            list3.append(cm_data["comment_information"][i])
    df = pd.DataFrame(list3)
    for index, row in df.iterrows():
        insert_query = ''' INSERT INTO comments (Comment_Id,Video_Id ,Comment_Text,Comment_Author,Comment_Published)
        VALUES (%s, %s, %s, %s, %s)'''
        values = (row['Comment_Id'],row['Video_Id'],row['Comment_Text'],row['Comment_Author'],row['Comment_Published'])
        cur.execute(insert_query,values)
        mycon.commit()


# In[42]:


def tables():
    channels_tab()
    playlists_tab()
    videos_tab()
    comment_tab()
    return "Migrated"


# In[43]:


def channels_tabview():
    list = []
    mydb=client["youtube_db"]
    db_connect=mydb["data_channel"]
    for ch_data in db_connect.find({},{"_id":0,"channel_information_details":1}):
        list.append(ch_data["channel_information_details"])
    channels_tab = st.dataframe(list)
    return channels_tab


# In[45]:


def playlists_tabview():
    list1 = []
    mydb=client["youtube_db"]
    db_connect=mydb["data_channel"]
    for pl_data in db_connect.find({},{"_id":0,"playlist_information":1}):
        for i in range(len(pl_data["playlist_information"])):
            list1.append(pl_data["playlist_information"][i])
    playlists_tab = st.dataframe(list1)
    return playlists_tab


# In[47]:


def videos_tabview():
    list2 = []
    mydb=client["youtube_db"]
    db_connect=mydb["data_channel"]
    for vd_data in db_connect.find({},{"_id":0,"video_information":1}):
        for i in range(len(vd_data["video_information"])):
            list2.append(vd_data["video_information"][i])
    videos_tab = st.dataframe(list2)
    return videos_tab


# In[48]:


def comment_tabview():
    list3 = []
    mydb=client["youtube_db"]
    db_connect=mydb["data_channel"]
    for cm_data in db_connect.find({},{"_id":0,"comment_information":1}):
        for i in range(len(cm_data["comment_information"])):
            list3.append(cm_data["comment_information"][i])
    comment_tab = st.dataframe(list3)
    return comment_tab


# In[53]:


with st.sidebar:
    st.title(":red[YOUTUBE DATA HARVESTING AND WAREHOUSING]")
    st.caption("using SQL, MongoDB and Streamlit")
    st.title(":red[Skills Take Away From This Project]")
    st.subheader("Python scripting, Data Collection, MongoDB, Streamlit, API integration, Data Management using MongoDB (Atlas) and SQL")
    st.title(":red[Domain]")
    st.caption(":blue[Social Media]")
st.title(":blue[Explore Here]")
channel_id = st.text_input("Enter the Channel id")
channels = channel_id.split(',')
channels = [ch.strip() for ch in channels if ch]
if st.button("Extract data"):
    for channel in channels:
        id=[]
        mydb=client["youtube_db"]
        db_connect=mydb["data_channel"]
        if channel in id:
            st.success("Channel details of the given channel id: " + channel + " already exists")
        else:
            output = data_channel(channel)
            st.success(output)
if st.button("Migrate to SQL"):
    display = tables()
    st.success(display)  
show_table = st.radio("SELECT THE TABLE FOR VIEW",(":violet[channels]",":violet[playlists]",":violet[videos]",":violet[comments]"))
if show_table == ":violet[channels]":
    channels_tabview()
elif show_table == ":violet[playlists]":
    playlists_tabview()
elif show_table ==":violet[videos]":
    videos_tabview()
elif show_table == ":violet[comments]":
    comment_tabview()


# In[52]:


mycon=psycopg2.connect(host='localhost',user='postgres',password='dhia@91',database='youtube_db',port='5432')
cur=mycon.cursor()
ques = st.selectbox('Select Your Question',
                    ('1.What are the names of all the videos and their corresponding channels?',
                    '2. Which channels have the most number of videos, and how many videos do they have?',
                    '3. What are the top 10 most viewed videos and their respective channels?',
                    '4. How many comments were made on each video, and what are their corresponding video names?',
                    '5. Which videos have the highest number of likes, and what are their corresponding channel names?',
                    '6. What is the total number of likes for each video, and what are their corresponding video names?',
                    '7. What is the total number of views for each channel, and what are their corresponding channel names?',
                    '8. What are the names of all the channels that have published videos in the year 2022?',
                    '9. What is the average duration of all videos in each channel, and what are their corresponding channel names?',
                    '10. Which videos have the highest number of comments, and what are their corresponding channel names?'))

if ques == "1.What are the names of all the videos and their corresponding channels?":
    question1 = '''select Title as videotitle, Channel_Name as ChannelName from videos;'''
    cur.execute(question1)
    mycon.commit()
    q1=cur.fetchall()
    st.write(pd.DataFrame(q1, columns=["Video Title","Channel Name"]))
elif ques =="2. Which channels have the most number of videos, and how many videos do they have?":
    question2 = '''select Channel_Name as ChannelName,Total_Videos as No_of_Videos from channels order by Total_Videos desc;'''
    cur.execute(question2)
    mycon.commit()
    q2=cur.fetchall()
    st.write(pd.DataFrame(q2, columns=["Channel Name","Total Videos"]))
elif ques =="3. What are the top 10 most viewed videos and their respective channels?":
    question3 = '''select  Channel_Name as ChannelName, Views as mostviews, Title as VideoTitle from videos where Views is not null order by Views desc limit 10;'''
    cur.execute(question3)
    mycon.commit()
    q3= cur.fetchall()
    st.write(pd.DataFrame(q3, columns=["Channel Name", "Total Views", "Video Title"]))
elif ques=="4. How many comments were made on each video, and what are their corresponding video names?":
    question4 ='''select Comments as comments, Title as VideoTitle, Channel_Name as ChannelName from videos where Comments is not null;'''
    cur.execute(question4)
    mycon.commit()
    q4= cur.fetchall()
    st.write(pd.DataFrame(q4, columns=["No of Comments", "Video Title", "Channel Name"]))
elif ques=="5. Which videos have the highest number of likes, and what are their corresponding channel names?":
    question5 ='''select  Title as Video_Title, Likes as No_of_likes, Channel_Name as ChannelName from videos where Likes is not null order by Likes desc;'''
    cur.execute(question5)
    mycon.commit()
    q5= cur.fetchall()
    st.write(pd.DataFrame(q5, columns=[ "Video Title","Likes","Channel Name"]))
elif ques=="6. What is the total number of likes for each video, and what are their corresponding video names?":
    question6 = '''select Likes as No_of_likes,  Title as video_title from videos;'''
    cur.execute(question6)
    mycon.commit()
    q6= cur.fetchall()
    st.write(pd.DataFrame(q6, columns=[ "No of Likes","Video Title"]))
elif ques=="7. What is the total number of views for each channel, and what are their corresponding channel names?":
    question7='''select Views as No_of_views, Channel_Name as channelName from channels;'''
    cur.execute(question7)
    mycon.commit()
    q7= cur.fetchall()
    st.write(pd.DataFrame(q7, columns=[ "No of Views","Channel Name"]))
elif ques=="8. What are the names of all the channels that have published videos in the year 2022?":
    question8 = '''select Channel_Name as ChannelName, Title as video_title, Published_Date as Published from videos where extract(year from Published_Date) = 2022;'''
    cur.execute(question8)
    mycon.commit()
    q8= cur.fetchall()
    st.write(pd.DataFrame(q8, columns=[ "Channel Name", "Video Title", "Published At"]))
elif ques=="9. What is the average duration of all videos in each channel, and what are their corresponding channel names?":
    question9 = '''select Channel_Name as ChannelName, AVG(Duration) as Averageduration from videos group by Channel_Name;'''
    cur.execute(question9)
    mycon.commit()
    q9= cur.fetchall()
    qr9=pd.DataFrame(q9, columns=[ "Name of Channel", "Average Duration"])
    Qry=[]
    for index, row in qr9.iterrows():
        channelname = row['Name of Channel']
        average_duration = row['Average Duration']
        average_duration_str = str(average_duration)
        Qry.append({"Name of Channel": channelname ,  "Average Duration": average_duration_str})
    st.write(pd.DataFrame(Qry))
elif ques== "10. Which videos have the highest number of comments, and what are their corresponding channel names?":
    question10 = '''select Title as video_title, Comments as no_of_comments, Channel_Name as channelname from videos where Comments is not null order by Comments desc;'''
    cur.execute(question10)
    mycon.commit()
    q10= cur.fetchall()
    st.write(pd.DataFrame(q10, columns=[ "Video Title","No of Comments", "Channel Name"]))


